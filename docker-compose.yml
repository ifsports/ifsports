services:

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    user: "999:999"
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - ./envs/rabbitmq.env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  db_teams:
    image: postgres:15
    container_name: db_teams
    env_file:
      - ./envs/teams.env
    ports:
      - "5432:5432"
    volumes:
      - dados_postgres_teams:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d db_teams" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  teamsapi:
    build:
      context: ./teams_service
      dockerfile: Dockerfile
    container_name: teamsapi
    env_file:
      - ./envs/teams.env
      - ./jwt.env
    depends_on:
      db_teams:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  db_requests:
    image: postgres:15
    container_name: db_requests
    env_file:
      - ./envs/requests.env
    ports:
      - "5433:5432"
    volumes:
      - dados_postgres_requests:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U IntegradorEstelar_42 -d db_requests" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  requestsapi:
    build:
      context: ./requests_service
      dockerfile: Dockerfile
    container_name: requestsapi
    env_file:
      - ./envs/requests.env
      - ./jwt.env
    depends_on:
      db_requests:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  db_auth:
    image: postgres:15
    container_name: db_auth
    env_file:
      - ./envs/auth.env
    ports:
      - "5436:5432"
    volumes:
      - dados_postgres_auth:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U auth_user -d auth_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  authapi:
    build:
      context: ./auth_service_back
      dockerfile: Dockerfile
    container_name: authapi
    env_file:
      - ./envs/auth.env
      - ./jwt.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      db_auth:
        condition: service_healthy
    networks:
      - app-network

  db_calendar:
    image: postgres:15
    container_name: db_calendar
    env_file:
      - ./envs/calendar.env
    ports:
      - "5442:5432"
    volumes:
      - dados_postgres_calendar:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U IntegradorMundial_87 -d db_calendar" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  calendarapi:
    build:
      context: ./calendar-service
      dockerfile: Dockerfile
    container_name: calendarapi
    env_file:
      - ./envs/calendar.env
    depends_on:
      db_calendar:
        condition: service_healthy
    networks:
      - app-network

  db_competitions:
    image: postgres:15
    container_name: db_competitions
    env_file:
      - ./envs/competitions.env
    ports:
      - "5434:5432"
    volumes:
      - dados_postgres_competition:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U IntegradorGalatico_77 -d db_competitions" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  competitionsapi:
    build:
      context: ./competitions-service
      dockerfile: Dockerfile
    container_name: competitionsapi
    env_file:
      - ./envs/competitions.env
      - ./jwt.env
    depends_on:
      db_competitions:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  competitionsapi_consumer:
    build:
      context: ./competitions-service
      dockerfile: Dockerfile
    container_name: competitions_consumer
    command: python /code/competitions/api/v1/messaging/consumers.py
    env_file:
      - ./envs/competitions.env
    depends_on:
      db_competitions:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  db_match_comments:
    image: postgres:15
    container_name: db_match_comments
    env_file:
      - ./envs/match_comments.env
    ports:
      - "5435:5432"
    volumes:
      - dados_postgres_match_comments:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U IntegradorInternacional_94 -d db_match_comments" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  commentsapi:
    build:
      context: ./match-comments-service
      dockerfile: Dockerfile
    container_name: commentsapi
    env_file:
      - ./envs/match_comments.env
      - ./jwt.env
    depends_on:
      db_match_comments:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  commentsapi_consumer:
    build:
      context: ./match-comments-service
      dockerfile: Dockerfile
    container_name: commentsapi_consumer
    command: python /app/messaging/consumers.py
    env_file:
      - ./envs/match_comments.env
    depends_on:
      db_match_comments:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  audit:
    build:
      context: ./audit_service
      dockerfile: Dockerfile
    container_name: audit
    command: celery -A audit_project worker -l info --queues audit_queue
    env_file:
      - ./envs/audit.env
      - ./jwt.env
    depends_on:
      db_audit:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

  db_audit:
    image: postgres:15
    container_name: db_audit
    env_file:
      - ./envs/audit.env
    ports:
      - "5437:5432"
    volumes:
      - dados_postgres_audit:/var/lib/postgresql/data/
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U audit_user -d audit_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  kong-gateway:
    image: kong:latest
    container_name: kong-gateway
    env_file:
      - ./jwt.env
    environment:
      - KONG_DATABASE=off                            
      - KONG_DECLARATIVE_CONFIG=/kong_config/kong.yml  
      - KONG_PROXY_LISTEN=0.0.0.0:8000                 
      - KONG_ADMIN_LISTEN=0.0.0.0:8001                 
    ports:
      - "80:8000"     
      - "8001:8001"    
    volumes:
      - ./kong.yml:/kong_config/kong.yml:ro
    networks:
      - app-network
    depends_on: 
      - teamsapi
      - requestsapi
      - authapi
      - competitionsapi
      - commentsapi
      - audit

volumes:
  dados_postgres_teams: {}
  dados_postgres_requests: {}
  dados_postgres_competition: {}
  dados_postgres_match_comments: {}
  dados_postgres_auth: {}
  dados_postgres_audit: {}
  dados_postgres_calendar: {}
  rabbitmq_data: {}

networks:
  app-network:
    driver: bridge