openapi: 3.0.3
info:
  title: API de Autenticação - IFSports
  version: 1.0.0
  description: Serviço de autenticação e usuários.
paths:
  /api/v1/auth/logout/:
    post:
      operationId: v1_auth_logout_create
      description: |2

        Este endpoint apenas registra a intenção de logout para fins de auditoria.
        O cliente (frontend) é responsável por apagar os tokens armazenados localmente para efetivar o logout.

        **Esta rota não recebe corpo na requisição.**
      summary: Registra o evento de logout do usuário.
      tags:
      - Autenticação
      security:
      - jwtAuth: []
      responses:
        '200':
          description: Logout recebido. O cliente deve apagar os tokens.
        '401':
          description: Não autenticado.
  /api/v1/auth/token/:
    post:
      operationId: v1_auth_token_create
      description: |2

        Autentica um usuário (geralmente um organizador) com base na matrícula e senha locais.

        **Exemplo de Corpo da Requisição (Payload):**

        .. code-block:: json

           {
             "matricula": "20210000000001",
             "password": "senha_forte_123"
           }

        **Exemplo de Resposta de Sucesso:**

        .. code-block:: json

           {
             "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
             "access": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
           }
      summary: Autentica um organizador via matrícula e senha.
      tags:
      - Autenticação
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: Autenticação bem-sucedida. Retorna os tokens.
        '401':
          description: Credenciais inválidas.
        '403':
          description: Esta conta está desativada.
  /api/v1/auth/token/refresh/:
    post:
      operationId: v1_auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - v1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/auth/users/:
    post:
      operationId: v1_auth_users_create
      description: |2

        Recebe uma lista de matrículas e retorna quais são válidas e quais são inválidas.

        **Exemplo de Corpo da Requisição (Payload):**

        .. code-block:: json

           {
             "user_ids": ["20210001", "20210002", "matricula_invalida"]
           }

        **Exemplo de Resposta:**

        .. code-block:: json

           {
             "all_exist": false,
             "message": "As seguintes matrículas não foram encontradas: matricula_invalida",
             "valid_ids": ["20210001", "20210002"],
             "invalid_ids": ["matricula_invalida"]
           }
      summary: Verifica a existência de usuários por matrícula.
      tags:
      - Usuários
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: Validação concluída.
        '400':
          description: Erro no formato da requisição.
  /api/v1/auth/users/{id}/:
    get:
      operationId: v1_auth_users_retrieve
      description: |2

        Note que o `id` na URL corresponde à `matrícula` do usuário.

        **Exemplo de Resposta de Sucesso:**

        .. code-block:: json

           {
             "id": "a1b2c3d4...",
             "matricula": "20210002",
             "email": "outro@exemplo.com",
             "nome": "Outro Usuário",
             "campus": "PF",
             "foto": "https://url.da.foto/outra.png",
             "sexo": "F",
             "tipo_usuario": "SERVIDOR",
             "curso": null,
             "situacao": "Ativo",
             "data_nascimento": "1990-05-15",
             "is_active": true,
             "is_staff": true,
             "groups": ["Organizador"]
           }
      summary: Busca os dados de um usuário específico por matrícula.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Usuários
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '404':
          description: Usuário com a matrícula especificada não foi encontrado.
  /api/v1/auth/users/by-ids/:
    post:
      operationId: v1_auth_users_by_ids_create
      description: |2

        Recebe uma lista de matrículas e retorna uma lista com os dados dos usuários encontrados.

        **Exemplo de Corpo da Requisição (Payload):**

        .. code-block:: json

           {
             "ids": ["20210001", "20210002"]
           }
      summary: Busca múltiplos usuários por uma lista de matrículas.
      tags:
      - Usuários
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
        '400':
          description: Corpo da requisição inválido ou ausente.
  /api/v1/auth/users/me/:
    get:
      operationId: v1_auth_users_me_retrieve
      description: |2

        Utiliza o token de autenticação enviado no header para identificar o usuário.

        **Exemplo de Resposta de Sucesso:**

        .. code-block:: json

           {
             "id": "1",
             "matricula": "20221094040022",
             "email": "usuario@exemplo.com",
             "nome": "Nome do Usuário",
             "campus": "CN",
             "foto": "https://url.da.foto/imagem.png",
             "sexo": "M",
             "tipo_usuario": "ALUNO",
             "curso": "Técnico em Informática",
             "situacao": "Matriculado",
             "data_nascimento": "2005-10-20",
             "is_active": true,
             "is_staff": false,
             "groups": ["Jogador"]
           }
      summary: Retorna os dados do usuário atualmente autenticado.
      tags:
      - Usuários
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '401':
          description: Não autenticado.
components:
  schemas:
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        matricula:
          type: string
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
        nome:
          type: string
          maxLength: 150
        campus:
          type: string
          readOnly: true
          nullable: true
        foto:
          type: string
          format: uri
          readOnly: true
          nullable: true
        sexo:
          type: string
          readOnly: true
          nullable: true
        tipo_usuario:
          type: string
          readOnly: true
          nullable: true
        curso:
          type: string
          readOnly: true
          nullable: true
        situacao:
          type: string
          readOnly: true
          nullable: true
        data_nascimento:
          type: string
          format: date
          readOnly: true
          nullable: true
        is_active:
          type: boolean
        is_staff:
          type: boolean
          readOnly: true
        groups:
          type: array
          items:
            type: string
          readOnly: true
      required:
      - campus
      - curso
      - data_nascimento
      - email
      - foto
      - groups
      - id
      - is_staff
      - matricula
      - nome
      - sexo
      - situacao
      - tipo_usuario
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
